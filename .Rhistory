shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
load("D:/annPeakR/GeneSigDB_GS.RData")
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
x <- org.Mm.egGO
library(org.Hs.eg.db)
library(org.Mm.eg.db)
x <- org.Mm.egGO
org.Mm.egGO
x <- org.Mm.egGO
mapped_genes <- mappedkeys(x)
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
xx <- as.list(x[mapped_genes])
got <- xx[[1]]
got[[1]][["Evidence"]]
length(xx)
xx[[1]]
got[[1]][["Evidence"]]
got <- xx[[1]]
xx <- as.list(x[mapped_genes])
length(got)
got
class(got[[1]])
?getEvidenceCodes
??getEvidenceCodes
?getEvidence
getEvidence("GO:0043565")
??GOHyperGParams
?getEvidence
library("hgu95av2.db")
bb <- hgu95av2GO[["39613_at"]]
org.Mm.eg.db
org.Mm.eg.db[[1]]
org.Mm.egGO[[1]]
got
got[["GO:0043565"]]
xx
got <- unlist(xx)
class(got)
head(got)
got <- unique(unlist(xx))
length(got)
tail(got)
xx[["GO:0006351"]]
xx <- as.list(org.Mm.egGO2ALLEGS)
xx <- as.list(org.Mm.egGO2ALLEGS)
head(xx)
goids <- xx[2:3]
goids
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
?"lapply"
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
"enhancer" == "enhancer"
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
?textInput
??textInput
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
shiny::runApp('D:/annPeakR')
peaks1 <- read.table("D:/annPeakR/RbKO_crypts_anti-E2F3.bed",sep="\t")
head(peaks1)
peaks2 <- read.table("D:/annPeakR/RbKO_crypts_anti-Myc.bed",sep="\t")
name1 <- "E2F3"
name2 <- "Myc"
if(name1 == name2){
return("identical peakset")
} # identical peakset
merged_peaks <- data.frame(
chromosome=c(peaks1[,1,drop=TRUE], peaks2[,1,drop=TRUE]),
pos=c(round( (as.numeric(peaks1[,2,drop=TRUE]) + as.numeric(peaks1[,3, drop=TRUE])) / 2 ),
round( (as.numeric(peaks2[,2,drop=TRUE]) + as.numeric(peaks2[,3, drop=TRUE])) / 2 )),
group=c(rep(name1, nrow(peaks1)), rep(name2, nrow(peaks2))))
head(merged_peaks)
distances_list <- list()
distances_list[[name1]] <- vector()
distances_list[[name2]] <- vector()
i <-"chr17"
merged_peaks_in_chr <- subset(merged_peaks, chromosome==chr)
chr <-"chr17"
merged_peaks_in_chr <- subset(merged_peaks, chromosome==chr)
merged_peaks_in_chr <- merged_peaks_in_chr[order( as.numeric(merged_peaks_in_chr[,"pos"]) ),]
head(merged_peaks_in_chr)
tail(merged_peaks_in_chr)
i <- 1
if(i ==1){
before_group <- merged_peaks_in_chr[i,"group"]
nClust <- 1
clusters <- nClust}
nClust
clusters
i <- i + 1
before_group != merged_peaks_in_chr[i,"group"]
if( before_group != merged_peaks_in_chr[i,"group"] ){
nClust <- nClust + 1
before_group <- merged_peaks_in_chr[i,"group"]
}
clusters <- c(clusters, nClust)
clusters
i <- i +1
before_group != merged_peaks_in_chr[i,"group"]
i
before_group
merged_peaks_in_chr[i,"group"]
clusters <- c(clusters, nClust)
for(i in 1:nrow(merged_peaks_in_chr)){
if(i ==1){
before_group <- merged_peaks_in_chr[i,"group"]
nClust <- 1
clusters <- nClust}
else {
if( before_group != merged_peaks_in_chr[i,"group"] ){
nClust <- nClust + 1
before_group <- merged_peaks_in_chr[i,"group"]
}
clusters <- c(clusters, nClust)
}
}
head(merged_peaks_in_chr)
head(clusters)
nClust
tail(clusters)
tail(merged_peaks_in_chr)
source('D:/annPeakR/target_gene_prediction.R')
geneTargets <- list()
data[["E2F3"]] <- peaks1
data <- list()
data[["E2F3"]] <- peaks1
data[["Myc"]] <- peaks2
promoter.left <- 5000
promoter.right <- 2000
enhancer.left <- 50000
for(i in names(data)){
geneTargets[[i]] <- target_gene_prediction(data[[i]], input$genomeBuild,
promoter.left, promoter.right, enhancer.left)
}
for(i in names(data)){
geneTargets[[i]] <- target_gene_prediction(data[[i]], "mm9"#input$genomeBuild,
promoter.left, promoter.right, enhancer.left)
}
for(i in names(data)){
geneTargets[[i]] <- target_gene_prediction(data[[i]], "mm9",#input$genomeBuild,
promoter.left, promoter.right, enhancer.left)
}
head(peaks1)
data <- lapply(data, function(x){colnames(x) <- c("space", "start" , "end", "V4", "V5")})
for(i in names(data)){
geneTargets[[i]] <- target_gene_prediction(data[[i]], "mm9",#input$genomeBuild,
promoter.left, promoter.right, enhancer.left)
}
geneTargets[[i]] <- target_gene_prediction(data[[i]], "mm9",
promoter.left, promoter.right, enhancer.left)
head(data[["E2F3"]])
data[["E2F3"]] <- peaks1
data[["Myc"]] <- peaks2
}
lapply(data, function(x){colnames(x) <- c("space", "start" , "end", "V4", "V5"); x})
data <- lapply(data, function(x){colnames(x) <- c("space", "start" , "end", "V4", "V5"); x})
head(data[["E2F3"]])
for(i in names(data)){
geneTargets[[i]] <- target_gene_prediction(data[[i]], "mm9",#input$genomeBuild,
promoter.left, promoter.right, enhancer.left)
}
head(geneTargets[["E2F3"]])
subregion<- "promoter"
targets <- geneTargets
test <- lapply(targets, function(x){
subset(x, gene_region == subregion)[,c("peak_chr", "peak_start", "peak_end")]
})
lapply(test, nrow)
test[["E2F3"]]
head(test[["E2F3"]])
peaks1 <- test[["E2F3"]]
peaks2 <- test[["Myc"]]
if(name1 == name2){
return("identical peakset")
} # identical peakset
merged_peaks <- data.frame(
chromosome=c(peaks1[,1,drop=TRUE], peaks2[,1,drop=TRUE]),
pos=c(round( (as.numeric(peaks1[,2,drop=TRUE]) + as.numeric(peaks1[,3, drop=TRUE])) / 2 ),
round( (as.numeric(peaks2[,2,drop=TRUE]) + as.numeric(peaks2[,3, drop=TRUE])) / 2 )),
group=c(rep(name1, nrow(peaks1)), rep(name2, nrow(peaks2))))
head(merged_peaks)
head(peaks1[,1,drop=TRUE])
merged_peaks <- data.frame(
chromosome=c(as.character(peaks1[,1,drop=TRUE]), as.character(peaks2[,1,drop=TRUE])),
pos=c(round( (as.numeric(peaks1[,2,drop=TRUE]) + as.numeric(peaks1[,3, drop=TRUE])) / 2 ),
round( (as.numeric(peaks2[,2,drop=TRUE]) + as.numeric(peaks2[,3, drop=TRUE])) / 2 )),
group=c(rep(name1, nrow(peaks1)), rep(name2, nrow(peaks2))))
head(merged_peaks)
distances_list <- list()
distances_list[[name1]] <- vector()
distances_list[[name2]] <- vector()
shiny::runApp('D:/annPeakR')
citation()
citation("shiny")
shiny::runApp('D:/annPeakR')
3000 / 5.2 * 5.34
shiny::runApp('D:/annPeakR')
options(stringsAsFactors = FALSE)
old <- read.table("D:/life/bioinformatics/Peking tumor/unify/old.txt", sep="\t", header=TRUE, quote="")
new <- read.table("D:/life/bioinformatics/Peking tumor/20160111/new.txt", sep="\t", header=TRUE, quote="")
head(old, n=1)
head(new, n=1)
old <- read.table("D:/life/bioinformatics/Peking tumor/unify/old.txt", sep="\t", header=TRUE, quote="")[,c(1,6,7,8,9)]
new <- read.table("D:/life/bioinformatics/Peking tumor/20160111/new.txt", sep="\t", header=TRUE, quote="")[,c(1,7,8,9,10)]
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- subset(old, Sample == i)
temp.new <- subset(new, Sample == i)
c(nrow(temp.old), nrow(temp.new), length(intersect(apply(temp.old, 1, paste), apply(temp.new, 1, paste))))
}
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- subset(old, Sample == i)
temp.new <- subset(new, Sample == i)
print(c(nrow(temp.old), nrow(temp.new), length(intersect(apply(temp.old, 1, paste), apply(temp.new, 1, paste)))))
}
nrow(temp.old)
nrow(temp.new)
head(apply(temp.old, 1, paste))
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- subset(old, Sample == i)
temp.new <- subset(new, Sample == i)
print(c(nrow(temp.old), nrow(temp.new), length(intersect(apply(temp.old, 1, paste, collapse="_"), apply(temp.new, 1, paste, collapse="_")))))
}
head(apply(temp.old, 1, paste, collapse="_"))
length(apply(temp.old, 1, paste, collapse="_"))
length(apply(temp.new, 1, paste, collapse="_"))
length(intersect(apply(temp.old, 1, paste, collapse="_"), apply(temp.new, 1, paste, collapse="_"))))
length(intersect(apply(temp.old, 1, paste, collapse="_"), apply(temp.new, 1, paste, collapse="_")))
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- subset(old, Sample == i)
temp.new <- subset(new, Sample == i)
print(c(nrow(temp.old), nrow(temp.new), length(intersect(apply(temp.old, 1, paste, collapse="_"), apply(temp.new, 1, paste, collapse="_")))))
}
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- apply(subset(old, Sample == i), 1, paste, collapse="_")
temp.new <- apply(subset(new, Sample == i), 1, paste, collapse="_")
print(c(length(temp.old), length(temp.new), length(intersect(temp.old, temp.new))))
print(setdiff(temp.old, temp.new))
}
i
options(stringsAsFactors = FALSE)
old <- read.table("D:/life/bioinformatics/Peking tumor/unify/old.txt", sep="\t", header=TRUE, quote="")[,c(1,6,7,8,9)]
new <- read.table("D:/life/bioinformatics/Peking tumor/20160111/All_final.txt", sep="\t", header=TRUE, quote="")[,c(1,7,8,9,10)]
head(new, n=2)
head(old)
new <- read.table("D:/life/bioinformatics/Peking tumor/20160111/All_final.txt", sep="\t", header=TRUE, quote="") #[,c(1,7,8,9,10)]
head(new, n=2)
old <- read.table("D:/life/bioinformatics/Peking tumor/unify/old.txt", sep="\t", header=TRUE, quote="")[,c(1,6,7,8,9)]
new <- read.table("D:/life/bioinformatics/Peking tumor/20160111/All_final.txt", sep="\t", header=TRUE, quote="")[,c(1,6,7,8,9)]
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- apply(subset(old, Sample == i), 1, paste, collapse="_")
temp.new <- apply(subset(new, Sample == i), 1, paste, collapse="_")
print(c(length(temp.old), length(temp.new), length(intersect(temp.old, temp.new))))
print(setdiff(temp.old, temp.new))
}
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- apply(subset(old, Sample == i), 1, paste, collapse="_")
temp.new <- apply(subset(new, Sample == i), 1, paste, collapse="_")
print(c(length(temp.old), length(temp.new), length(intersect(temp.old, temp.new))))
#print(setdiff(temp.old, temp.new))
}
for(i in intersect(unique(old[,1]), unique(new[,1]))){
temp.old <- apply(subset(old, Sample == i), 1, paste, collapse="_")
temp.new <- apply(subset(new, Sample == i), 1, paste, collapse="_")
print(c(length(temp.old), length(temp.new), length(intersect(temp.old, temp.new))))
print(setdiff(temp.new, temp.old))
}
source('~/.active-rstudio-document')
head(temp.old, n=2)
?grep
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
before <- scan("D:/life/bioinformatics/Peking tumor/20160111/before.txt", what="character")
after <- scan("D:/life/bioinformatics/Peking tumor/20160111/after.txt", what="character")
genes <- union(unique(before), unique(after))
count_table <- matrix(0, ncol=2, nrow=length(genes))
genes <- union(unique(before), unique(after))
count_table <- matrix(0, ncol=2, nrow=length(genes))
colnames(count_table) <- c("before", "after")
rownames(count_table) <- genes
before_c <- table(before)
after_c <- table(after)
before <- scan("D:/life/bioinformatics/Peking tumor/20160111/before.txt", what="character")
after <- scan("D:/life/bioinformatics/Peking tumor/20160111/after.txt", what="character")
before_c <- table(before)
after_c <- table(after)
genes <- union(unique(before), unique(after))
count_table <- matrix(0, ncol=2, nrow=length(genes))
colnames(count_table) <- c("before", "after")
rownames(count_table) <- genes
count_table[names(before_c), "before"] <- before_c
count_table[names(after_c), "after"] <- after_c
count_table
write.table(count_table, file="count_table.txt", sep="\t", quote=FALSE)
write.table(count_table, file="D:/life/bioinformatics/Peking tumor/20160111/count_table.txt", sep="\t", quote=FALSE)
before <- scan("D:/life/bioinformatics/Peking tumor/20160111/before.txt", what="character")
after <- scan("D:/life/bioinformatics/Peking tumor/20160111/after.txt", what="character")
before_c <- table(before)
after_c <- table(after)
genes <- union(unique(before), unique(after))
count_table <- matrix(0, ncol=2, nrow=length(genes))
colnames(count_table) <- c("before", "after")
rownames(count_table) <- genes
count_table[names(before_c), "before"] <- before_c
count_table[names(after_c), "after"] <- after_c
write.table(count_table, file="D:/life/bioinformatics/Peking tumor/20160111/count_table.txt", sep="\t", quote=FALSE)
8*1.07^20
8*1.07^20/6
?hclust
card_probability <- list(
"1_point", 2,
"2_point", 1,
"3_point", 1,
"4_point", 1,
"5_point", 1,
"6_point", 1,
"7_point", 1,
"8_point", 1,
"9_point", 1,
"10_point", 4,
"11_point", 1
)
card_probability <- lapply(card_probability, function(x){x/sum(card_probability)})
card_probability <- lapply(card_probability, function(x){x/sum(unlist(card_probability))})
card_probability
card_probability <- list(
"1_point" = 2,
"2_point"= 1,
"3_point"= 1,
"4_point"= 1,
"5_point"= 1,
"6_point"= 1,
"7_point"= 1,
"8_point"= 1,
"9_point"= 1,
"10_point"= 4,
"11_point"= 1
)
card_probability
card_probability <- lapply(card_probability, function(x){x/sum(unlist(card_probability))})
card_probability
card_counts <- list(
"1_point" = 2,
"2_point"= 1,
"3_point"= 1,
"4_point"= 1,
"5_point"= 1,
"6_point"= 1,
"7_point"= 1,
"8_point"= 1,
"9_point"= 1,
"10_point"= 4,
"11_point"= 1
)
cards <- vector()
for(i in names(card_counts)){
cards <- c(cards, rep(i, card_counts[[i]]))
}
cards
?sample
source('C:/Users/hgf/Desktop/21pocker.R')
res
v <- sample(cards, 1000)
v <- sample(cards, 1000, replace = TRUE)
sum(v > 5)
sum(v > 4)
sum(v <= 5)
sum(v <= 4)
sum(v > 6)
21 - 6
sum(v > 7)
12 -7
21- 7
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <17){xx <- xx + sample(cards,1)}}
sum(v > 21)
for(i in 1:1000){xx <- sample(cards, 1); while(xx <17){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <14){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=15){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
sum(v > 21)
table(v)
v <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v <- c(v, xx)}
table(v)
v1 <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
v2 <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v2 <- c(v2, xx)}
table(v1)
table(v2)
sum(v1>21)
sum(v2>21)
v2 <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v2 <- c(v2, xx)}
sum(v2>21)
sum(v1>21)
table(v1)
table(v2)
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=13){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
v2 <- vector()
for(i in 1:1000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v2 <- c(v2, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v2 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v2 <- c(v2, xx)}
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=13){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=15){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=13){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=12){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=11){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=10){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=9){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=8){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=11){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=12){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=13){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=14){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=15){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
v1 <- vector()
for(i in 1:10000){xx <- sample(cards, 1); while(xx <=16){xx <- xx + sample(cards,1)}; v1 <- c(v1, xx)}
sum((v1 > v2 & v1 <=21) | (v1<=21 & v2>21))
shiny::runApp('D:/annPeakR')
shiny::runApp()
?HTML
shiny::runApp()
?radioButtons
shiny::runApp()
